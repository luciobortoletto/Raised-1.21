plugins {
    id "fabric-loom" version "1.2-SNAPSHOT"
    id "maven-publish"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    maven { url "https://cursemaven.com" }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modCompileOnly "curse.maven:appleskin-248787:3927567"
    modCompileOnly "curse.maven:botania-fabric-421839:4371118"
    modCompileOnly "curse.maven:create-fabric-624165:4537370"
    modCompileOnly "curse.maven:detail-armor-bar-506898:3823985"
    modCompileOnly "curse.maven:farmers-delight-fabric-482834:4111426"
    modCompileOnly "curse.maven:health-overlay-fabric-313219:4403399"
    modCompileOnly "curse.maven:inventorio-491073:4066027"
    modCompileOnly "curse.maven:inventory-profiles-next-495267:4591808"
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release = 17
}

loom {
    accessWidenerPath = file("src/main/resources/${project.archives_base_name}.accesswidener")

    mixin {
        defaultRefmapName = "${project.archives_base_name}.refmap.json"
    }
}

java {
    withSourcesJar()
}

jar {
    from("LICENSE")
    jar.archiveAppendix.set("fabric-${project.minecraft_version}")
    sourcesJar.archiveAppendix.set("fabric-${project.minecraft_version}")
    remapJar.archiveAppendix.set("fabric-${project.minecraft_version}")
    remapSourcesJar.archiveAppendix.set("fabric-${project.minecraft_version}")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    repositories {
    }
}